#:import ScrollEffect kivy.effects.scroll.ScrollEffect
#:set Green_switch [0, 0.7, 0, 1]
#:set Red_switch [0.7, 0, 0, 1]
#:set Gray [0.7, 0.7, 0.7, 1]

<LogsScreen>:
    name: "Logs Screen"
    on_pre_enter: self.title = self.get_account_name()

    BoxLayout:
        id: main_boxlayout
        orientation: 'vertical'

        MDTopAppBar:
            id: topbar
            title: root.title
            anchor_title: "center"
            specific_text_color: [1, 1, 1, 1]
            elevation: 3
            md_bg_color: [.2, .2, .2, 1] # root.go_back_to_main_screen()
            left_action_items: [["arrow-left", lambda _: root.add_log()]] # arrow-left-thick arrow-left menu
            right_action_items: [["pause", lambda x: root.change_autoscroll(x), "Auto-Scroll on/off"]] #[["toggle-switch", lambda _: root.add_log()]] # dots-vertical # "toggle-switch"
            pos_hint: {"top": 1}
        
        FloatLayout:
            id: float_layout

            ScrollView:
                id: scrollview
                # effect_cls: 'ScrollEffect' # Não rolar mais do que pode
                # always_overscroll: False # False impede o OverScroll (rolagem maior que o widget)
                effect_x: ScrollEffect() # Impede o OverScroll no eixo X

                MDBoxLayout:
                    id: logs_box
                    orientation: 'vertical'
                    padding: 10

                    size_hint_x: None
                    size_hint_y: None # Primordial para o ScrollView funcionar
                    height: self.minimum_height # Primordial para o ScrollView funcionar
                    width: 291 + 10 + 10 # Alterar o valor 291 através da função add_log() para ficar da mesma largura do botão/log (self.width) acrescentado // 10 + 10 significam os valores da direita e esquerda do padding

                    md_bg_color: [0, 0.7, 0.7, 1]
            
            MDIconButton:
                id: filter_button
                icon: "filter"
                md_bg_color: Gray
                angle: 0
                canvas.before:
                    PushMatrix
                    Rotate:
                        angle: self.angle
                        origin: self.center
                canvas.after:
                    PopMatrix
                # on_release: root.open_filters() # print('oi')

                pos_hint: {"right": 0.95, "y": 0.05}

            # Filter:
            #     id: label_2
            #     text: 'SystemLogs'
            #     icon: 'abacus'
                # tamanho_da_fonte: sp(12)
                # pos_hint: {'center_x': 0.5, 'center_y': 0.3}
                # on_release: print('bye world')
                # cor_do_icone: [0, 1, 0 ,1]
                # cor_do_fundo: [0.3,0.3,0.3,1]
                # cor_da_fonte: [1,1,1,1]


#:set border_width dp(2)
#:set _padding dp(10)
<-Filter>:
    orientation: 'vertical'
    size_hint: None, None
    _width: None
    #width: (label.texture_size[0] + icon._size[0] if icon._size[0] < dp(50) and icon.icon and label.text else label.texture_size[0] + icon._size[0]+ dp(20)) if not self._width else self._width
    width: dp(86) #(label.texture_size[0] if icon._size[0] < label.texture_size[0] else icon._size[0]) + 2*_padding

    _height: None
    height: (dp(50) if icon._size[1] < dp(50) else icon._size[1]) if not self._height else self._height

    #padding: _padding
    #spacing: dp(10) if icon.icon and label.text else 0
    
    cor_do_fundo: [1, 1, 1, 1]
    # line_width: 1.05
    # line_color: [0, 0, 0, 1]
    
    cor_da_fonte: [0.3, 0.3, 0.3, 1]
    tamanho_da_fonte: sp(12)

    cor_do_icone: [0, 0, 0, 1]

    pos_hint:{"center_x": 0.5} # , 'center_y': 0.5}

    cor_borda: [0,0,0,1]

    canvas.before:
        # Desenhando a borda
        Color:
            rgba: self.cor_borda
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: root.raio_da_borda

        # Desenhando o fundo
        Color:
            rgba: root.cor_do_fundo if self.state == 'normal' else [root.cor_do_fundo[0]*.8, root.cor_do_fundo[1]*.8, root.cor_do_fundo[2]*.8, root.cor_do_fundo[3]*1]
        RoundedRectangle:
            size: self.width-border_width, self.height-border_width #self.size
            pos: self.x+border_width/2, self.y+border_width/2 # self.pos
            radius: root.raio_da_borda
            # line_width: 1.05
            # line_color: [0, 0, 0, 1]

    on_release: pass # app.screen_manager.get_screen("Logs Screen").select_filter #print(self.width)#
        
    MDIcon:
        id: icon
        pos_hint: {'center_x': 0.5, 'center_y': 0.5}
        icon: root.icon
        theme_text_color: 'Custom'
        text_color: root.cor_do_icone
        font_size: sp(30)
        size_hint: None, None
        size: self.texture_size
    Label:
        id: label
        text: root.text
        font_size: root.tamanho_da_fonte
        color: root.cor_da_fonte

<FiltersSelection>:
    id: filters_selection
    cols: 2
    # rows: 7
    padding: dp(10)
    spacing: dp(5)

    pos_hint: {'center_x': 0.5, 'center_y': 0.5}
    size_hint: 0.95, 0.8

    md_bg_color: [0, 0, 0, 0.7]
    radius: 5

<Log>:
    id: log

    size_hint_x: None
    size_hint_y: None
    height: 40

    MDRaisedButton:
        id: log_btn
        text: ''
        text_color: [1, 1, 1, 1]
        font_size: 14
        halign: 'left'

        pos_hint: {"left": 1}
        size_hint_x: None

        on_release: app.screen_manager.get_screen("Logs Screen").add_log()
    
