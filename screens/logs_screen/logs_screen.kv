#:import ScrollEffect kivy.effects.scroll.ScrollEffect
#:set Green_switch [0, 0.7, 0, 1]
#:set Red_switch [0.7, 0, 0, 1]
#:set Gray [0.7, 0.7, 0.7, 1]

<LogsScreen>:
    name: "Logs Screen"
    on_pre_enter: self.title = self.get_account_name()

    BoxLayout:
        id: main_boxlayout
        orientation: 'vertical'

        MDTopAppBar:
            id: topbar
            title: root.title
            anchor_title: "center"
            specific_text_color: [1, 1, 1, 1]
            elevation: 3
            md_bg_color: [.2, .2, .2, 1] # root.go_back_to_main_screen()
            left_action_items: [["arrow-left", lambda _: root.add_log()]] # arrow-left-thick arrow-left menu
            right_action_items: [["pause", lambda x: root.change_autoscroll(x), "Auto-Scroll on/off"]] #[["toggle-switch", lambda _: root.add_log()]] # dots-vertical # "toggle-switch"
            pos_hint: {"top": 1}
        
        FloatLayout:
            id: float_layout

            SmartRV:
                id: scrollview
                # effect_cls: 'ScrollEffect' # Não rolar mais do que pode
                # always_overscroll: False # False impede o OverScroll (rolagem maior que o widget)
                effect_x: ScrollEffect() # Impede o OverScroll no eixo X
                
                # MDBoxLayout:
                #     id: logs_box
                #     orientation: 'vertical'
                #     padding: 10

                #     size_hint_x: None
                #     size_hint_y: None # Primordial para o ScrollView funcionar
                #     height: self.minimum_height # Primordial para o ScrollView funcionar
                #     width: 291 + 10 + 10 # Alterar o valor 291 através da função add_log() para ficar da mesma largura do botão/log (self.width) acrescentado // 10 + 10 significam os valores da direita e esquerda do padding

                #     md_bg_color: [0, 0.7, 0.7, 1]
                


            MDIconButton:
                id: filter_button
                icon: "filter"
                md_bg_color: Gray
                angle: 0
                canvas.before:
                    PushMatrix
                    Rotate:
                        angle: self.angle
                        origin: self.center
                canvas.after:
                    PopMatrix
                # on_release: root.open_filters() # print('oi')

                pos_hint: {"right": 0.95, "y": 0.05}

            # ScrollView:

            #     # MDBoxLayout:
            #     #     orientation: "vertical"

            #     MDFloatingActionButtonSpeedDial:
            #         id: floating_button
            #         callback: self.parent.parent.parent.parent.call #root.call
            #         data: root.data # self.parent.parent.parent.data

            #         # Personalizando o botão root
            #         icon: "filter"
            #         root_button_anim: True
            #         hint_animation: True
            #         bg_hint_color: [0.7, 0.7, 0.7, 0] # Invisível

            #         # Personalizando o label
            #         label_radius: 10 # Quanto maior, mais redondo
            #         label_bg_color: [0.7, 0.7, 0.7, 1]

            FiltersSelection:

<Filter>:
    md_bg_color: Gray
    label_radius: 50

    MDIcon:

    Label:
    

<FiltersSelection>:
    id: filters_selection
    cols: 2
    # rows: 7
    padding: dp(5)
    spacing: dp(5)
    # adaptive_height: True

    pos_hint: {'center_x': 0.5, 'center_y': 0.5}
    size_hint: 0.95, 0.8

    md_bg_color: [1,1,1,0]
    radius: 5
    
    
    # canvas.before:
    #     Color:
    #         rgba: [0,0,0,0]
    #     Rectangle:
    #         size: self.size
    #         pos: self.pos

<Log>:
    id: log

    size_hint_x: None
    size_hint_y: None
    height: 40

    MDRaisedButton:
        id: log_btn
        text: ''
        text_color: [1, 1, 1, 1]
        font_size: 14
        halign: 'left'

        pos_hint: {"left": 1}
        size_hint_x: None

        on_release: app.screen_manager.get_screen("Logs Screen").add_log()
    
